}
	return (0);
	printf("Successfully written to %s\n", av[argc - 1]);
	close(piper.output_fd);
	}
		return (-1);
		perror("Failed to handle commands\n");
	{
	if (piper_process(argc, av, envp, &piper) == -1)
	initialize_piper(&piper, argc, av);
		return (-1);
	if (parse_checker(argc, av, envp) == -1)

	pipex	piper;
{
int	main(int argc, char **av, char **envp)

}
	return (0);
	}
		return (-1);
		perror("Cant access files\n");
	{
	if (access(av[1], F_OK) == -1)
	}
		return (-1);
		printf("Usage: %s <input_file> <cmd1> ... <output_file>\n", av[0]);
	{
	if (argc < 5)
{
int	parse_checker(int argc, char **av, char **envp)

}
		perror("Output file open failed");
	if (piper->output_fd == -1)
	piper->output_fd = open(av[argc - 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
	piper->previous = piper->input_fd;
		perror("Input file open failed");
	if (piper->input_fd == -1)
	piper->input_fd = open(av[1], O_RDONLY);
	piper->pipe[1] = 0;
	piper->pipe[0] = 0;
	piper->executable_cmd = NULL;
	piper->cmd = NULL;
{
void	initialize_piper(pipex *piper, int argc, char **av)

}
	return (0);
		;
	while (wait(NULL) > 0)
	}
		shell_value++;
		}
			parrent_process(piper);
			waitpid(pid, NULL, 0);
		{
		if (pid > 0)
			child_process(piper, envp, shell_value, argc);
		if (pid == 0)
		pid = fork();
		}
			return (-1);
			perror("Pipe creation failed");
		{
		if (pipe(piper->pipe) == -1)
		piper->cmd = av[shell_value];
	{
	while (shell_value != argc - 1)
	shell_value = 2;

	int	pid;
	int	shell_value;
{
int	piper_process(int argc, char **av, char **envp, pipex *piper)

}
	piper->previous = piper->pipe[0];
	close(piper->pipe[1]);
		close(piper->previous);
	if (piper->previous != piper->input_fd)
{
void	parrent_process(pipex *piper)

}
	execute_cmd(piper->cmd, envp, piper);
		close(piper->output_fd);
	if (piper->output_fd > 0)
	close(piper->pipe[1]);
	close(piper->previous);
	}
		}
			exit(1);
			perror("dup2 failed on pipe");
		{
		if (dup2(piper->pipe[1], STDOUT_FILENO) == -1)
	{
	else
	}
		}
			exit(1);
			perror("dup2 failed on output");
		{
		if (dup2(piper->output_fd, STDOUT_FILENO) == -1)
	{
	if (cmd_index == argc - 2)
	}
		exit(1);
		perror("dup2 failed on input");
	{
	if (dup2(piper->previous, STDIN_FILENO) == -1)
	close(piper->pipe[0]);
	ft_printf("Child process %d executing: %s\n", cmd_index, piper->cmd);
{
void	child_process(pipex *piper, char **envp, int cmd_index, int argc)

#include "pipex.h"

/* ************************************************************************** */
/*                                                                            */
/*   Updated: 2024/12/30 04:27:31 by iatilla-         ###   ########.fr       */
/*   Created: 2024/12/13 04:36:20 by iatilla-          #+#    #+#             */
/*                                                +#+#+#+#+#+   +#+           */
/*   By: iatilla- <iatilla-@student.42.fr>          +#+  +:+       +#+        */
/*                                                    +:+ +:+         +:+     */
/*   pipex.c                                            :+:      :+:    :+:   */
/*                                                        :::      ::::::::   */
/*                                                                            */
/* ************************************************************************** */
