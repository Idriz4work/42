




		;
		{
		{
		{
		}
		}
		}
	{
	{
	{
	}
	}
	}
/*                                                                            */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*                                                    +:+ +:+         +:+     */
/*                                                +#+#+#+#+#+   +#+           */
/* ************************************************************************** */
/* ************************************************************************** */
{
{
}
}
/*   By: iatilla- <iatilla-@student.42.fr>          +#+  +:+       +#+        */
	char	*path;
	close(piper.output_fd);
			close(piper.pipe[0]);
			close(piper.pipe[0]);
			close(piper.pipe[1]);
			close(piper.pipe[1]);
			close(piper.previous);
/*   Created: 2024/12/13 04:36:20 by iatilla-          #+#    #+#             */
				dup2(piper.output_fd, STDOUT_FILENO);
				dup2(piper.pipe[1], STDOUT_FILENO);
			dup2(piper.pipe[1], STDOUT_FILENO);
			dup2(piper.previous, STDIN_FILENO);
			else
			execute_cmd(av[shell_value], envp);
	execve(path, piper.cmd, envp);
		exit(1);
	exit(1);
	free(path);
	if (access(av[1], F_OK) == -1)
	if (argc < 5)
	if (!path)
		if (pid == 0)
		if (pid > 0)
		if (pipe(piper.pipe) == -1)
			if (shell_value == argc - 2)
#include "pipex.h"
int	main(int argc, char **av, char **envp)
	int		pid;
	int		shell_value;
	path = get_right_path(envp);
	perror("execve failed");
			perror("Pipe creation failed");
		pid = fork();
	piper.cmd[0] = path;
	piper.cmd[1] = "-c";
	piper.cmd[2] = cmd;
	piper.cmd[3] = NULL;
	piper.output_fd = open(av[argc - 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
	piper.previous = open(av[1], O_RDONLY);
			piper.previous = piper.pipe[0];
/*   pipex.c                                            :+:      :+:    :+:   */
	pipex	piper;
	pipex	piper;
		printf("Cannot access input file: %s\n", av[1]);
	printf("Successfully written to %s\n", av[argc - 1]);
		printf("Usage: %s <input_file> <cmd1> ... <output_file>\n", av[0]);
	return (0);
			return (-1);
		return (1);
		return (1);
		shell_value++;
	shell_value = 2;
/*   Updated: 2024/12/27 15:47:29 by iatilla-         ###   ########.fr       */
void	execute_cmd(char *cmd, char **envp)
			waitpid(pid, NULL, 0);
	while (shell_value != argc - 1)
	while (wait(NULL) > 0)
